-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/githubuser/GameOfLife#readme</a>
@package GameOfLife
@version 0.1.0.0

module GameOfLife
type Cells = [Cell]
type Cell = (Coord, State)
type Coord = (Int, Int)
type Coords = [Coord]
data State
Alive :: State
Dead :: State
type States = [State]
data Grid
Grid :: Int -> Int -> Cells -> Grid

-- | Deze functie berekent de nieuwe generatie van een grid op basis van
--   een gegeven lijst met levende coördinaten.
nextGen :: Coords -> Coords

-- | Deze functie berekent de nieuwe generatie van een coördinaat.
nextGenCell :: Coord -> Coords -> State

-- | Deze functie berekent de coördinaten van de buren van een gegeven cel.
getNeighbours :: Coord -> Coords

-- | Deze functie berekent of een coördinaat leven of dood is.
checkState :: Coord -> Coords -> State

-- | Deze functie berekent wat de nieuwe staat van een cel is aan de hand
--   van een lijst met staten.
checkRules :: States -> State

-- | Deze functie berekent de welke cellen levend zijn in een lijst van
--   cellen.
takeAliveCells :: Cells -> Coords

-- | Deze functie bouwt een grid waarbij je kan aangeven hoe groot hij moet
--   zijn, en welke cellen levend moeten zijn.
buildGrid :: Int -> Int -> Coords -> Grid

-- | Deze functie maakt cellen in een grid levend aan de hand van een lijst
--   met coördinaten.
setStatesAlive :: Coords -> Grid -> Grid

-- | Deze functie maakt een aangegeven cell levend in een grid.
setStateAlive :: Coord -> Grid -> Grid

-- | Dit is een geabstraheerde functie die bijna gelijk is aan de functie
--   map. Het ver schil is dat je bij deze functie een extra argument kan
--   meegeven aan de functie die je wilt mappen over de lijst.
customMap :: (a -> b -> c) -> [a] -> b -> [c]
instance GHC.Classes.Eq GameOfLife.State
instance GHC.Show.Show GameOfLife.Grid
instance GHC.Show.Show GameOfLife.State
